#!/usr/bin/env bash
# Custom Automated Installation for Debian-based OS
# Author: Erebus
# Tested on Ubuntu 20.04

PKG="./pentestpkg.csv"
TOOL_DIR="/home/$USER/tools"

InstallPkg() { sudo apt-get install -qq -y "$1" >/dev/null 2>&1 || Error "$1 Installation Failed" ;}

Error() { printf "ERROR:\\n%s\\n" "$1" >&2; exit 1;}

PreInstall() {
	printf "Installing the programs which is required to install and configure other programs\n"
	for x in curl git; do
		printf -- "\t- '$x'\n"
		InstallPkg "$x"
	done
}

PostInstall() {
	targets=("wireshark" "zsh")
	for target in "${targets[@]}"; do
		if [[ " ${programs[@]} " =~ " ${target} " ]]; then
			case "$target" in
				"wireshark") WiresharkAfterInstall ;;
				"zsh") ZshCustomInstall ;;
			esac
		fi
	done
}

ManualInstall() {
	mkdir -p "$TOOL_DIR"

	case $1 in
		dirsearch)
			cd "$TOOL_DIR"
			GitClone https://github.com/maurosoria/dirsearch.git && \
			cd dirsearch && \
			python3 -m pip install -r requirements.txt >/dev/null 2>&1 || Error "$1 Installation Failed"
			sudo ln -fs "$TOOL_DIR/dirsearch/dirsearch.py" /usr/bin/dirsearch
			;;
		firmware-mod-kit)
			sudo apt-get install -qq -y build-essential zlib1g-dev liblzma-dev python-magic bsdmainutils autoconf >/dev/null 2>&1
			cd "$TOOL_DIR"
			GitClone https://github.com/rampageX/firmware-mod-kit.git
			;;
		MetaSploit)
			curl -s https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > /tmp/msfinstall && \
			chmod 755 /tmp/msfinstall && \
			/tmp/msfinstall > /dev/null 2>&1 || Error "$1 Installation Failed"
			rm /tmp/msfinstall
			;;
		Neovim)
			sudo snap install --edge nvim --classic > /dev/null 2>&1 || Error "$1 Installation Failed"
			;;
		ngrok)
			wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip >/dev/null 2>&1
			unzip -oqq ngrok-stable-linux-amd64.zip -d "$TOOL_DIR/" >/dev/null 2>&1
			sudo ln -fs "$TOOL_DIR/ngrok" /usr/bin/ngrok
			rm ngrok-stable-linux-amd64.zip
			;;
		RouterSploit)
			mkdir -p "$TOOL_DIR/exploit" && cd "$TOOL_DIR/exploit"
			GitClone https://github.com/threat9/routersploit && \
			cd routersploit && \
			python3 -m pip install -r requirements.txt >/dev/null 2>&1 || Error "$1 Installation Failed"
			sudo ln -fs "$TOOL_DIR/exploit/routersploit/rsf.py" /usr/bin/rsf
			;;
		rtl8812au)
			# RTL8812AU/21AU Wireless drivers
			if ! dkms status | grep -q '8812au'; then
				GitClone https://github.com/aircrack-ng/rtl8812au.git && \
				cd rtl8812au && \
				sudo make dkms_install >/dev/null 2>&1 || Error "$1 Installation Failed"
				rm -rf rtl8812au
			fi
			;;
		SecLists)
			mkdir -p "$TOOL_DIR/wordlists" && cd "$TOOL_DIR/wordlists"
			GitClone https://github.com/danielmiessler/SecLists.git
			;;
		sqlmap)
			cd "$TOOL_DIR"
			GitClone https://github.com/sqlmapproject/sqlmap.git
			sudo ln -fs "$TOOL_DIR/sqlmap/sqlmap.py" /usr/bin/sqlmap
			;;
		*)
			Error "Unknown Installation Target '$1'"
			;;
	esac
}

# Installs all needed programs from main repo.
MainInstall() {
	InstallPkg "$1"
}

PipInstall() {
	[ -x "$(command -v "pip")" ] || InstallPkg python3-pip >/dev/null 2>&1
	yes | pip3 install "$1"
}

InstallationLoop() {
	cat "$PKG" | sed '/^#/d' > "/tmp/$PKG"
	total=$(grep -c "^[^X]" "/tmp/$PKG")
	printf "Starting Installation:\n"

	while IFS=, read -r tag program comment; do
		if [[ "$tag" != "X"* ]]; then
			programs+=("$program")
			n=$((n+1))
			# echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
			printf -- "%-25s %18s\n" "- $program" "($n of $total)"
		fi

		case "$tag" in
			"G") GitMakeInstall "$program" ;;
			"P") PipInstall "$program" ;;
			"M") ManualInstall "$program" ;;
      "X"*) : ;; 												# The programs you want to ignore now but keep in the list
			*) MainInstall "$program" ;;
		esac

	done < "/tmp/$PKG"
}

GitClone() {
	# if the repo already existed, pull to ensure it's up to date
	reponame=$(basename "$1" .git)
	if [ ! -d "$reponame" ] ; then
		git clone --depth 1 "$1" >/dev/null 2>&1
	else
		cd "$reponame"
		git pull "$1" >/dev/null 2>&1
		cd - >/dev/null 2>&1
	fi
}

GitMakeInstall() {
	reponame="$(basename "$1" .git)"
	dir="$repodir/$reponame"
	git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ; git pull --force origin master;}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1
}

WiresharkAfterInstall() {
	# Add current user to the group of wireshark
	yes yes | sudo DEBIAN_FRONTEND=teletype dpkg-reconfigure wireshark-common >/dev/null 2>&1
	sudo usermod -a -G wireshark "$USER"
}

ZshCustomInstall() {
	# Make zsh the default shell for the user
	printf "\nZsh installation detected! Making zsh the default shell for the current user\n"
	sudo chsh -s $(which zsh) "$USER" >/dev/null 2>&1 || Error "Failed to make zsh the default shell"

	while true; do
		read -p "Do you wish to install Zim (Zsh framework) and Powerlevel10k (Zsh theme) (Recommended)? " yn
		case "$yn" in
			[Yy]*) break ;;
      [Nn]*) return 0 ;;
    	*) printf "Please answer yes or no.\n" ;;
		esac
	done

	printf "Installing Zim ...\n"
	curl -s https://raw.githubusercontent.com/zimfw/install/master/install.zsh > /tmp/install.zsh && \
	chmod 755 /tmp/install.zsh && \
	zsh /tmp/install.zsh || \
	[ -d "/home/$USER/.zim" ] && printf "Zim was already installed. Skipping...\n" || \
	Error "Failed to install Zim Framework"

	printf "Installing Powerlevel10k...\n"
	grep -qxF "zmodule romkatv/powerlevel10k" "/home/$USER/.zimrc" || echo "zmodule romkatv/powerlevel10k" >> "/home/$USER/.zimrc"
	zsh -c "source /home/$USER/.zim/zimfw.zsh install" >/dev/null 2>&1 || Error "Failed to install Powerlevel10k theme"
	mkdir -p "/home/$USER/.local/share/fonts" && cd ~/.local/share/fonts
	wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf \
		https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf \
		https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf \
		https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf >/dev/null 2>&1
	fc-cache -f -v >/dev/null 2>&1

	printf "Please change the font in Gnome Terminal Preferences for the best experience and proceed ...\n"
	printf "\tTerminal Preferences > Profiles > Custom Font > MesloLGS NF Regular\n"
	read -n 1 -s -r -p $'[Press any key to continue]\n'
	zsh -c "source '/home/$USER/.zshrc'"
}

SessionLogout() {
	printf "The script completed successfully. The process of installation would be finished after you log out and log back in.\n"
  printf "You can log out of the current session with the following command:\n"
	printf -- "gnome-session-quit --logout --no-prompt\n"
}

export DEBIAN_FRONTEND=noninteractive

if [[ "$EUID" == 0 ]]; then
	printf "[WARNING] Do not run the script with sudo unless you are the root user\n"
	while true; do
		read -p "Are you sure you want to continue? " yn
		case "$yn" in
			[Yy]*) break ;;
      [Nn]*) exit ;;
    	*) printf "Please answer yes or no.\n" ;;
		esac
	done
fi

printf "Updating package list...\n"
sudo apt-get update >/dev/null 2>&1 || Error "APT Update Failed"

PreInstall
InstallationLoop
PostInstall

## Avoid systemd from binding to port 53 required by dnsmasq
# sudo sh -c "echo 'DNSStubListener=no' >> /etc/systemd/resolved.conf"
# sudo mv /etc/resolv.conf /etc/resolv.conf.bak
# sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
# sudo systemctl restart systemd-resolved

SessionLogout
